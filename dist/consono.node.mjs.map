{"version":3,"file":"consono.node.mjs","sources":["../src/const/options_default.js","../src/const/options_keys.js","../src/const/tag.js","../src/const/theme_dark.js","../src/const/theme_light.js","../src/core/node/theme.js","../src/const/theme_default.js","../src/utils/cliExit.js","../src/utils/node/cliPrint.js","../src/utils/funcNameExtract.js","../src/utils/isInteger.js","../src/utils/objectClass.js","../src/utils/prototypeName.js","../src/utils/objectDeCycle.js","../src/utils/objectPick.js","../src/utils/objectSize.js","../src/utils/objectType.js","../src/utils/processExit.js","../src/utils/stringClearReference.js","../src/core/node/consono.js","../src/helpers/node/consono.js","../src/helpers/node/consonoExit.js","../src/core/browser/theme.js","../src/utils/browser/cliPrint.js","../src/core/browser/consono.js","../src/utils/objectKeysSort.js","../src/helpers/node/consonoJSON.js","../src/helpers/node/consonoOut.js","../src/helpers/node/consonoPlain.js","../src/helpers/node/consonoReturn.js"],"sourcesContent":["const OPTIONS_DEFAULT = {\n  arrayMaxElements: 99,\n  assignSymbol: \"→\",\n  clear: false,\n  colorize: true,\n  console: true,\n  depth: 20,\n  exit: false,\n  immediate: false,\n  indent: \"ˑˑ\",\n  indentPad: 1,\n  mapMaxEntries: 99,\n  objectMaxProps: 99,\n  quotesEnd: `\"`,\n  quotesStart: `\"`,\n  returns: true,\n  setMaxValues: 99,\n  stdout: false,\n  stringMaxLength: 360,\n};\n\nexport default OPTIONS_DEFAULT;\n","const OPTIONS_KEYS = [\n  \"arrayMaxElements\",\n  \"assignSymbol\",\n  \"clear\",\n  \"colorize\",\n  \"console\",\n  \"depth\",\n  \"exit\",\n  \"indent\",\n  \"mapMaxEntries\",\n  \"objectMaxProps\",\n  \"quotesEnd\",\n  \"quotesStart\",\n  \"returns\",\n  \"setMaxValues\",\n  \"stdout\",\n  \"stringMaxLength\",\n];\n\nexport default OPTIONS_KEYS;\n","const TAG_ARGUMENTS = \"[object Arguments]\";\nconst TAG_ARRAY = \"[object Array]\";\nconst TAG_ARRAY_BUFFER = \"[object ArrayBuffer]\";\nconst TAG_ASYNC_FUNCTION = \"[object AsyncFunction]\";\nconst TAG_BIGINT = \"[object BigInt]\";\nconst TAG_BOOL = \"[object Boolean]\";\nconst TAG_DATE = \"[object Date]\";\nconst TAG_ERROR = \"[object Error]\";\nconst TAG_FUNCTION = \"[object Function]\";\nconst TAG_GENERATOR = \"[object Generator]\";\nconst TAG_GENERATOR_FUNCTION = \"[object GeneratorFunction]\";\nconst TAG_GLOBAL = \"[object global]\";\nconst TAG_MAP = \"[object Map]\";\nconst TAG_NULL = \"[object Null]\";\nconst TAG_NUMBER = \"[object Number]\";\nconst TAG_OBJECT = \"[object Object]\";\nconst TAG_PROMISE = \"[object Promise]\";\nconst TAG_REGEXP = \"[object RegExp]\";\nconst TAG_SET = \"[object Set]\";\nconst TAG_SHARED_ARRAY_BUFFER = \"[object SharedArrayBuffer]\";\nconst TAG_STRING = \"[object String]\";\nconst TAG_SYMBOL = \"[object Symbol]\";\nconst TAG_VOID = \"[object Undefined]\";\nconst TAG_WEAK_MAP = \"[object WeakMap]\";\nconst TAG_WEAK_SET = \"[object WeakSet]\";\nconst TAG_WINDOW = \"[object Window]\";\n\nexport default {\n  ARGUMENTS: TAG_ARGUMENTS,\n  ARRAY: TAG_ARRAY,\n  ARRAY_BUFFER: TAG_ARRAY_BUFFER,\n  ASYNC_FUNCTION: TAG_ASYNC_FUNCTION,\n  BIGINT: TAG_BIGINT,\n  BOOL: TAG_BOOL,\n  DATE: TAG_DATE,\n  ERROR: TAG_ERROR,\n  FUNCTION: TAG_FUNCTION,\n  GENERATOR: TAG_GENERATOR,\n  GENERATOR_FUNCTION: TAG_GENERATOR_FUNCTION,\n  GLOBAL: TAG_GLOBAL,\n  MAP: TAG_MAP,\n  NULL: TAG_NULL,\n  NUMBER: TAG_NUMBER,\n  OBJECT: TAG_OBJECT,\n  PROMISE: TAG_PROMISE,\n  REGEXP: TAG_REGEXP,\n  SET: TAG_SET,\n  SHARED_ARRAY_BUFFER: TAG_SHARED_ARRAY_BUFFER,\n  STRING: TAG_STRING,\n  SYMBOL: TAG_SYMBOL,\n  VOID: TAG_VOID,\n  WEAK_MAP: TAG_WEAK_MAP,\n  WEAK_SET: TAG_WEAK_SET,\n  WINDOW: TAG_WINDOW,\n};\n","const THEME_DARK = {\n  argument: [253, 151, 31],\n  boolean: [174, 129, 255],\n  comment: [117, 113, 94],\n  keyword: [249, 38, 114],\n  name: [230, 219, 116],\n  number: [174, 129, 255],\n  plain: [128, 128, 128],\n  property: [102, 217, 239],\n  string: [166, 226, 46],\n};\n\nexport default THEME_DARK;\n","const THEME_LIGHT = {\n  argument: [245, 135, 31],\n  boolean: [66, 113, 174],\n  comment: [117, 113, 94],\n  keyword: [200, 40, 41],\n  name: [201, 159, 0],\n  number: [101, 67, 133],\n  plain: [128, 128, 128],\n  property: [32, 123, 129],\n  string: [113, 140, 0],\n};\n\nexport default THEME_LIGHT;\n","import chalk from \"chalk\";\n\nimport THEME_DARK from \"../../const/theme_dark.js\";\nimport THEME_LIGHT from \"../../const/theme_light.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\nexport default class Theme {\n  /**\n   * @constructor\n   * @param {number=3} level\n   * @param {Object|string=} theme\n   */\n  constructor(level = 3, theme = THEME_DEFAULT) {\n    this.cli = new chalk.Instance({ level: Math.min(level, chalk.supportsColor.level) });\n    let rgb;\n    switch (true) {\n      case theme === \"dark\":\n        rgb = THEME_DARK;\n        break;\n      case theme === \"light\":\n        rgb = THEME_LIGHT;\n        break;\n      case Object.prototype.toString.call(theme) === \"[object Object]\":\n        rgb = { ...THEME_LIGHT, ...theme };\n        break;\n      default:\n        rgb = THEME_LIGHT;\n        break;\n    }\n    this.argument = this.compose(...rgb.argument);\n    this.boolean = this.compose(...rgb.boolean);\n    this.comment = this.compose(...rgb.comment);\n    this.keyword = this.compose(...rgb.keyword);\n    this.name = this.compose(...rgb.name);\n    this.number = this.compose(...rgb.number);\n    this.plain = this.compose(...rgb.plain);\n    this.property = this.compose(...rgb.property);\n    this.string = this.compose(...rgb.string);\n  }\n  static toRGB(color) {\n    color = Number.parseInt(color.toString(), 10);\n    if (!Number.isInteger(color)) {\n      return 255;\n    }\n    return Math.min(255, Math.max(0, color));\n  }\n  compose(red = 255, green = 255, blue = 255) {\n    red = Theme.toRGB(red);\n    green = Theme.toRGB(green);\n    blue = Theme.toRGB(blue);\n    return (value) => {\n      if (!this.cli || !this.cli.rgb) {\n        return value.toString();\n      }\n      return this.cli.rgb(red, green, blue)(value.toString());\n    };\n  }\n}\n","export const THEME_DEFAULT = \"light\";\n","export default function cliExit() {\n  if (\"clear\" in console) {\n    try {\n      console.clear();\n    } catch (err) {\n      //\n    }\n  } else {\n    try {\n      process.stdout.write(\"\\u001b[2J\\u001b[0;0H\");\n    } catch (err) {\n      //\n    }\n  }\n}\n","export default function cliPrint(message, stdout = false) {\n  if (!stdout) {\n    console.log(message);\n  } else {\n    process.stdout.write(message);\n  }\n}\n","export default function funcNameExtract(func) {\n  if (func.name) {\n    return func.name;\n  }\n  const result = /^function\\s+([\\w]+)\\s*\\(/.exec(func.toString());\n  return result ? result[1] : \"\";\n}\n","export default function isInteger(value) {\n  return Number.isInteger(Number.parseInt(value));\n}\n","export default function objectClass(value) {\n  if (value && \"constructor\" in value && \"name\" in value.constructor) {\n    return value.constructor.name;\n  }\n  return \"\";\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function prototypeName(value) {\n  return Object.prototype.toString.call(value);\n}\n","import TAG from \"../const/tag.js\";\nimport prototypeName from \"./prototypeName.js\";\n\nfunction looseClone(object) {\n  if (object == null || typeof object !== \"object\") {\n    return object;\n  }\n  const inExactInstance = new object.constructor();\n  for (let key in object) {\n    inExactInstance[key] = looseClone(object[key]);\n  }\n  return inExactInstance;\n}\n\nexport default function objectDeCycle(object) {\n  const objects = [];\n  const paths = [];\n  return (function deReCycle(value, path) {\n    let index;\n    let name;\n    let newIterable;\n    if (\n      typeof value === \"object\" &&\n      value !== null &&\n      !(value instanceof Boolean) &&\n      !(value instanceof Date) &&\n      !(value instanceof Number) &&\n      !(value instanceof RegExp) &&\n      !(value instanceof String)\n    ) {\n      for (index = 0; index < objects.length; index += 1) {\n        if (objects[index] === value) {\n          return { \"&circularReference\": paths[index] };\n        }\n      }\n      objects.push(value);\n      paths.push(path);\n      if (prototypeName(value) === TAG.ARRAY) {\n        newIterable = [];\n        for (index = 0; index < value.length; index += 1) {\n          newIterable[index] = deReCycle(value[index], `${path}[\"${index}\"]`);\n        }\n      } else {\n        if (Object.isFrozen(object)) {\n          newIterable = looseClone(object);\n        } else {\n          newIterable = Object.create(object);\n        }\n        for (name in value) {\n          if (Object.prototype.hasOwnProperty.call(value, name)) {\n            newIterable[name] = deReCycle(value[name], `${path}[${JSON.stringify(name)}]`);\n          }\n        }\n      }\n      return newIterable;\n    }\n    return value;\n  })(object, \"&\");\n}\n","export default function objectPick(object, keys) {\n  if (!keys.length || !Object.keys(object).length) {\n    return {};\n  }\n  return keys.reduce((accumulator, key) => {\n    accumulator[key] = object[key];\n    return accumulator;\n  }, {});\n}\n","export default function objectSize(obj) {\n  return Object.keys(obj).length;\n}\n","import prototypeName from \"./prototypeName.js\";\n\nexport default function objectType(value) {\n  const type = prototypeName(value).toLowerCase().split(\"[object \").pop().split(\"]\").shift();\n  if ([\"global\", \"window\"].includes(type)) {\n    return \"object\";\n  }\n  if (type.includes(\"error\")) {\n    return \"error\";\n  }\n  return type;\n}\n","export default function processExit(code = 0) {\n  if (code === false) {\n    return;\n  }\n  if (code === true) {\n    code = 0;\n  }\n  const exitCode = Number.parseInt(code.toString());\n  if (!Number.isInteger(exitCode)) {\n    return;\n  }\n  if (exitCode < 0) {\n    return;\n  }\n  try {\n    process.exit(exitCode);\n  } catch (error) {\n    //\n  }\n}\n","export default function stringClearReference(text) {\n  return text.length < 12 ? text : (\" \" + text).slice(1);\n}\n","import OPTIONS_DEFAULT from \"../../const/options_default.js\";\nimport OPTIONS_KEYS from \"../../const/options_keys.js\";\nimport TAG from \"../../const/tag.js\";\nimport Theme from \"./theme.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/node/cliPrint.js\";\nimport funcNameExtract from \"../../utils/funcNameExtract.js\";\nimport isInteger from \"../../utils/isInteger.js\";\nimport objectClass from \"../../utils/objectClass.js\";\nimport objectDeCycle from \"../../utils/objectDeCycle.js\";\nimport objectPick from \"../../utils/objectPick.js\";\nimport objectSize from \"../../utils/objectSize.js\";\nimport objectType from \"../../utils/objectType.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport prototypeName from \"../../utils/prototypeName.js\";\nimport stringClearReference from \"../../utils/stringClearReference.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\nexport default class Consono {\n  #arrayMaxElements;\n  #arrow;\n  #clear;\n  #colorize;\n  #console;\n  #currentDepth;\n  #depth;\n  #exit;\n  #immediate;\n  #indentType;\n  #indent;\n  #mapMaxEntries;\n  #objectMaxProps;\n  #quotesEnd;\n  #quotesStart;\n  #returns;\n  #setMaxValues;\n  #stdout;\n  #stringMaxLength;\n  #theme;\n  /**\n   * @public\n   * @constructor\n   * @param {Object=} options\n   * @param {Object|string=} theme\n   */\n  constructor(options = {}, theme = THEME_DEFAULT) {\n    this.setOptions(options);\n    this.setTheme(theme);\n  }\n  /**\n   * @public\n   * @param {Object|string=} theme\n   */\n  setTheme(theme) {\n    /** @protected */\n    this.#theme = new Theme(this.#colorize ? 3 : 0, theme);\n  }\n  /**\n   * @public\n   * @param {Object=} options\n   */\n  setOptions(options = {}) {\n    options = options || {};\n    const opts = {\n      ...OPTIONS_DEFAULT,\n      ...options,\n    };\n    this.#arrayMaxElements = Number.parseInt(opts.arrayMaxElements);\n    this.#arrow = `${opts.assignSymbol}`;\n    this.#clear = !!opts.clear;\n    this.#colorize = !!opts.colorize;\n    this.#console = !!opts.console;\n    this.#stdout = !!opts.stdout;\n    this.#currentDepth = 0;\n    this.#depth = Number.parseInt(opts.depth);\n    if (opts.exit === false) {\n      this.#exit = false;\n    } else if (opts.exit === true) {\n      this.#exit = 0;\n    } else if (isInteger(opts.exit)) {\n      this.#exit = opts.exit;\n    } else {\n      this.#exit = false;\n    }\n    this.#indentType = `${opts.indent}`;\n    this.#indent = this.#indentType.repeat(opts.indentPad);\n    this.#mapMaxEntries = Number.parseInt(opts.mapMaxEntries);\n    this.#objectMaxProps = Number.parseInt(opts.objectMaxProps);\n    this.#quotesEnd = `${opts.quotesEnd}`;\n    this.#quotesStart = `${opts.quotesStart}`;\n    this.#returns = !!opts.returns;\n    this.#immediate = !!opts.immediate;\n    this.#setMaxValues = Number.parseInt(opts.setMaxValues);\n    this.#stringMaxLength = Number.parseInt(opts.stringMaxLength);\n  }\n  /**\n   * @public\n   * @param {*} value\n   * @param {string=} indent\n   * @param {boolean|string=true} describe\n   * @param {string=\"\"} subType\n   * @returns {string}\n   */\n  toPrintable(value, indent = \"\", describe = true, subType = \"\") {\n    let print = \"\";\n    let startsWith = \"\";\n    let endsWith = \"\";\n    let iterationLimit;\n    const type = objectType(value);\n    switch (type) {\n      case \"array\": {\n        const arrLength = value.length;\n        if (arrLength > this.#arrayMaxElements) {\n          startsWith = `${this.#theme.keyword(\"array\")}${subType.length ? ` ${this.#theme.keyword(subType)}` : \"\"} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"elements\")}${this.#theme.plain(\"=\")}\\\n${this.#theme.number(arrLength)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}=${this.#theme.number(this.#arrayMaxElements)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"[\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"array\")}${subType.length ? ` ${this.#theme.keyword(subType)}` : \"\"} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"elements\")}${this.#theme.plain(\"=\")}\\\n${this.#theme.number(arrLength)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"[\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"]\")}`;\n        iterationLimit = this.#arrayMaxElements;\n        break;\n      }\n      case \"object\": {\n        const origObject = value;\n        value = objectDeCycle(value);\n        if (describe === true) {\n          const size = objectSize(value);\n          let printSize = \"\";\n          if (size > this.#objectMaxProps) {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#objectMaxProps)}${this.#theme.plain(\n              \")\",\n            )}`;\n          } else {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\")\")}`;\n          }\n          startsWith = `${this.#theme.keyword(\"object\")} \\\n${this.#theme.keyword(objectClass(origObject))} ${printSize} ${this.#theme.plain(\"{\")}\\n`;\n          endsWith = `${indent}${this.#theme.plain(\"}\")}`;\n        } else {\n          startsWith = `${this.#theme.plain(\"(\")}\\n`;\n          endsWith = `${indent}${this.#theme.plain(\")\")}`;\n        }\n        iterationLimit = this.#objectMaxProps;\n        break;\n      }\n      case \"arguments\": {\n        const argLength = value.length;\n        if (argLength > this.#arrayMaxElements) {\n          startsWith = `${this.#theme.keyword(\"arguments\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"arity\")}${this.#theme.plain(\"=\")}${this.#theme.number(argLength)}, \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#arrayMaxElements)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"[\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"arguments\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"arity\")}${this.#theme.plain(\"=\")}${this.#theme.number(argLength)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"[\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"]\")}`;\n        iterationLimit = this.#arrayMaxElements;\n        break;\n      }\n      case \"set\": {\n        const setSize = value.size;\n        if (setSize > this.#setMaxValues) {\n          startsWith = `${this.#theme.keyword(\"set\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(setSize)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#setMaxValues)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"set\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(setSize)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        }\n        endsWith = `${indent}}`;\n        iterationLimit = this.#setMaxValues;\n        break;\n      }\n      case \"map\": {\n        const mapSize = value.size;\n        if (mapSize > this.#mapMaxEntries) {\n          startsWith = `${this.#theme.keyword(\"map\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(mapSize)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#mapMaxEntries)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"map\")} ${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(mapSize)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"{\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"}\")}`;\n        iterationLimit = this.#mapMaxEntries;\n        break;\n      }\n      default:\n        return this.formatValue(indent, value);\n    }\n    let iteration = 0;\n    switch (type) {\n      case \"set\": {\n        const iterateSet = Array.from(value);\n        for (let itemKey = 0; itemKey < iterateSet.length; itemKey++) {\n          const originalValue = iterateSet[itemKey];\n          const formattedValue = this.formatValue(indent, originalValue);\n          print += this.formatAssign(\"set\", indent, itemKey, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      }\n      case \"map\":\n        for (const entry of value.entries()) {\n          const [entryKey, entryValue] = entry;\n          const formattedValue = this.formatValue(indent, { key: entryKey, value: entryValue }, false);\n          print += this.formatAssign(\"map\", indent, entryKey, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      default: {\n        const keys = Object.keys(value)\n          .sort((alpha, beta) => alpha.localeCompare(beta))\n          .reduce((previous, current) => {\n            previous[current] = undefined;\n            return previous;\n          }, {});\n        for (const key in keys) {\n          if (!Object.prototype.hasOwnProperty.call(value, key)) {\n            continue;\n          }\n          const originalValue = value[key];\n          const originalParamType = objectType(originalValue);\n          const formattedValue = this.formatValue(indent, originalValue);\n          print += this.formatAssign(originalParamType, indent, key, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return `${startsWith}${print}${endsWith}`;\n  }\n  /**\n   * @protected\n   * @param {string} indent\n   * @param {*} originalValue\n   * @param {boolean|string=true} describe\n   * @returns {string}\n   */\n  formatValue(indent, originalValue, describe = true) {\n    let value = \"\";\n    let type = objectType(originalValue);\n    let subType = \"\";\n    const tag = prototypeName(originalValue);\n    switch (tag) {\n      case TAG.VOID:\n        [type, value] = this.formatUndefined();\n        break;\n      case TAG.NULL:\n        [type, value] = this.formatNull();\n        break;\n      case TAG.GLOBAL:\n      case TAG.WINDOW:\n        [type, value] = this.formatGlobal(tag, originalValue, indent);\n        break;\n      case TAG.BIGINT:\n        [type, value] = this.formatBigInt(originalValue);\n        break;\n      case TAG.NUMBER:\n        [type, value] = this.formatNumber(originalValue);\n        break;\n      case TAG.BOOL:\n        [type, value] = this.formatBoolean(originalValue);\n        break;\n      case TAG.STRING:\n        [type, value] = this.formatString(originalValue);\n        break;\n      case TAG.REGEXP:\n        [type, value] = this.formatRegexp(originalValue);\n        break;\n      case TAG.FUNCTION:\n      case TAG.ASYNC_FUNCTION:\n      case TAG.GENERATOR_FUNCTION:\n        [type, value] = this.formatFunction(tag, originalValue);\n        break;\n      case TAG.DATE:\n        [type, value] = this.formatDate(originalValue);\n        break;\n      case TAG.ARGUMENTS:\n        [type, value] = this.formatArguments(originalValue);\n        break;\n      case TAG.SYMBOL:\n        [type, value] = this.formatSymbol(originalValue);\n        break;\n      case TAG.PROMISE:\n        [type, value] = this.formatPromise();\n        break;\n      case TAG.GENERATOR:\n        [type, value] = this.formatGenerator();\n        break;\n      case TAG.ERROR:\n        [type, value] = this.formatError(originalValue);\n        break;\n      case TAG.WEAK_SET:\n      case TAG.WEAK_MAP:\n        [type, value] = this.formatWeak(tag);\n        break;\n      case TAG.SET:\n        [type, value] = this.formatSet(originalValue);\n        break;\n      case TAG.MAP:\n        [type, value] = this.formatMap(originalValue);\n        break;\n      case TAG.ARRAY_BUFFER:\n      case TAG.SHARED_ARRAY_BUFFER:\n        [type, value] = this.formatBuffer(tag, originalValue);\n        break;\n      default:\n        if (tag.includes(\"Array\")) {\n          type = \"array\";\n          subType = objectClass(originalValue).toLowerCase();\n          originalValue = Array.from(originalValue);\n        } else if (tag.includes(\"Iterator]\")) {\n          const iterator = tag.split(\" \")[1];\n          if (iterator === \"Set\") {\n            return this.toPrintable(new Set(Array.from(originalValue).map((e) => e[1])), indent, describe);\n          } else if (iterator === \"Map\") {\n            return this.toPrintable(new Map(Array.from(originalValue)), indent, describe);\n          } else if (iterator === \"String\") {\n            return this.toPrintable(\n              Array.from(originalValue)\n                .map((e) => e[1])\n                .join(\"\"),\n              indent,\n              describe,\n            );\n          } else if (iterator === \"Array\") {\n            return this.toPrintable(\n              Array.from(originalValue).map((e) => e[1]),\n              indent,\n              describe,\n            );\n          }\n        }\n        break;\n    }\n    switch (type) {\n      case \"array\":\n      case \"object\":\n        if (this.#currentDepth === this.#depth) {\n          const size = objectSize(originalValue);\n          let printSize = \"\";\n          if (size > this.#objectMaxProps) {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#objectMaxProps)}\\\n${this.#theme.plain(\")\")}`;\n          } else {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\")\")}`;\n          }\n          value = `${this.#theme.keyword(\"object\")} ${this.#theme.keyword(objectClass(originalValue))} ${printSize}`;\n        } else {\n          this.#currentDepth += 1;\n          let indentToPrint;\n          if (type === \"array\") {\n            indentToPrint = `${this.#theme.comment(indent)}`;\n          } else {\n            indentToPrint = `${indent}${this.#theme.comment(this.#indent)}`;\n          }\n          value = this.toPrintable(originalValue, indentToPrint, describe, subType);\n          this.#currentDepth -= 1;\n        }\n        break;\n      default:\n        if (!type.length) {\n          type = tag.split(\"[object \").pop().split(\"]\").shift().toLowerCase();\n          value = originalValue.toString();\n        }\n        break;\n    }\n    return `${this.#theme.keyword(type)}${type.length ? this.#theme.plain(\" • \") : \"\"}${value}`;\n  }\n  /**\n   * @protected\n   * @param {arguments} value\n   * @returns {[string, string]}\n   */\n  formatArguments(value) {\n    return [\"arguments\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @param {BigInteger} value\n   * @returns {[string, string]}\n   */\n  formatBigInt(value) {\n    return [\"number bigint\", this.#theme.number(value)];\n  }\n  /**\n   * @protected\n   * @param {boolean} value\n   * @returns {[string, string]}\n   */\n  formatBoolean(value) {\n    return [\"boolean\", this.#theme.boolean(value)];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {Buffer} value\n   * @returns {[string, string]}\n   */\n  formatBuffer(tag, value) {\n    return [\n      TAG.ARRAY_BUFFER ? \"array buffer\" : \"array buffer shared\",\n      `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"bytes\")}${this.#theme.plain(\"=\")}${this.#theme.number(value.byteLength)}\\\n${this.#theme.plain(\")\")}`,\n    ];\n  }\n  /**\n   * @protected\n   * @param {Date} value\n   * @returns {[string, string]}\n   */\n  formatDate(value) {\n    return [\"date\", this.#theme.name(value.toISOString() + \" • \" + value.toString())];\n  }\n  /**\n   * @protected\n   * @param {Error} value\n   * @returns {[string, *]}\n   */\n  formatError(value) {\n    return [`error ${objectClass(value)}`, this.#theme.string(value.message)];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {Function} value\n   * @returns {[string, string]}\n   */\n  formatFunction(tag, value) {\n    let type = \"function\";\n    switch (tag) {\n      case TAG.ASYNC_FUNCTION:\n        type = `${type} async`;\n        break;\n      case TAG.GENERATOR_FUNCTION:\n        type = `${type} generator`;\n        break;\n    }\n    const name = funcNameExtract(value);\n    if (name.length) {\n      type = `${type} ${this.#theme.name(name)}`;\n    } else {\n      type = `${type} anonymous`;\n    }\n    const source = `${value}`.replace(/\\n+/g, \"\").split(\")\").shift() + \") {…}\";\n    return [type, this.#theme.argument(source)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatGenerator() {\n    return [\"generator\", this.#theme.argument(\"Generator {…}\")];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {global|window} value\n   * @param {string} indent\n   * @returns {[string, string]}\n   */\n  formatGlobal(tag, value, indent) {\n    return [\n      `global ${tag === TAG.WINDOW ? \"window\" : \"this\"}`,\n      this.toPrintable({ ...value }, `${indent}${this.#theme.comment(this.#indent)}`),\n    ];\n  }\n  /**\n   * @protected\n   * @param {Map} value\n   * @returns {[string, string]}\n   */\n  formatMap(value) {\n    return [\"map\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatNull() {\n    return [\"empty\", this.#theme.string(\"null\")];\n  }\n  /**\n   * @protected\n   * @param {number} value\n   * @returns {[string, string]}\n   */\n  formatNumber(value) {\n    let type;\n    if (Number.isFinite(value)) {\n      if (Number.isInteger(value)) {\n        if (value === 0) {\n          if (Object.is(value, -0)) {\n            type = \"number negative zero\";\n          } else {\n            type = \"number zero\";\n          }\n        } else {\n          type = \"number integer\";\n        }\n      } else {\n        type = \"number float\";\n      }\n    } else {\n      type = \"number\";\n      if (Number.isNaN(value)) {\n        type += \" nan\";\n      } else if (value === Number.POSITIVE_INFINITY) {\n        type += \" positive infinity\";\n      } else {\n        type += \" negative infinity\";\n      }\n    }\n    return [type, this.#theme.number(Object.is(value, -0) ? \"-0\" : value)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatPromise() {\n    return [\"promise\", this.#theme.argument(\"Promise {…}\")];\n  }\n  /**\n   * @protected\n   * @param {RegExp} value\n   * @returns {[string, string]}\n   */\n  formatRegexp(value) {\n    return [`regexp ${value.flags}`, this.#theme.name(value)];\n  }\n  /**\n   * @protected\n   * @param {Set} value\n   * @returns {[string,string]}\n   */\n  formatSet(value) {\n    return [\"set\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @param {string} text\n   * @returns {[string, string]}\n   */\n  formatString(text) {\n    const stringAsArray = [...text];\n    const stringSize = stringAsArray.length;\n    const stringLength = text.length;\n    let printString = \"\";\n    if (this.#stringMaxLength > 0) {\n      if (stringLength !== stringSize) {\n        printString = stringAsArray.slice(0, this.#stringMaxLength).join(\"\");\n      } else {\n        printString = text.slice(0, this.#stringMaxLength);\n      }\n    }\n    let value;\n    if (stringLength === stringSize) {\n      value = `${this.#theme.string(this.#quotesStart)}\\\n${this.#theme.string(printString || text)}${this.#theme.string(this.#quotesEnd)} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"length\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringLength)}`;\n    } else {\n      value = `${this.#theme.string(this.#quotesStart)}\\\n${this.#theme.string(printString || text)}${this.#theme.string(this.#quotesEnd)} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"length\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringLength)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"symbols\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringSize)}`;\n    }\n    if (stringSize > this.#stringMaxLength) {\n      value = `${value}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(\n        this.#stringMaxLength,\n      )}${this.#theme.plain(\")\")}`;\n    } else {\n      value = `${value}${this.#theme.plain(\")\")}`;\n    }\n    stringClearReference(printString || text);\n    return [\"string\", value];\n  }\n  /**\n   * @protected\n   * @param {Symbol} value\n   * @returns {[string, string]}\n   */\n  formatSymbol(value) {\n    return [\"symbol\", value.toString()];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatUndefined() {\n    return [\"empty\", this.#theme.string(\"undefined\")];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @returns {[string,string]}\n   */\n  formatWeak(tag) {\n    if (tag === TAG.WEAK_MAP) {\n      return [\"map weak\", \"\"];\n    } else {\n      return [\"set weak\", \"\"];\n    }\n  }\n  /**\n   * @protected\n   * @param paramType\n   * @param {string} indent\n   * @param {number|string} key\n   * @param {*} value\n   * @returns {string}\n   */\n  formatAssign(paramType, indent, key, value) {\n    let keyPart;\n    if (paramType === \"map\") {\n      return `${indent}${this.#theme.comment(this.#indent)}${value}\\\n${this.#theme.plain(\",\")}\\n`;\n    } else if (paramType === \"set\") {\n      return `${indent}${this.#theme.comment(this.#indent)}${this.#theme.plain(this.#arrow)} ${value}\\\n${this.#theme.plain(\",\")}\\n`;\n    } else if (isInteger(key) || (paramType === \"array\" && typeof key !== \"string\")) {\n      keyPart = `${this.#theme.plain(\"[\")}${this.#theme.property(key)}${this.#theme.plain(\"]\")}`;\n    } else {\n      keyPart = `${this.#theme.plain(this.#quotesStart)}${this.#theme.property(key)}${this.#theme.plain(\n        this.#quotesEnd,\n      )}`;\n    }\n    return `${indent}${this.#theme.comment(this.#indent)}${keyPart} ${this.#theme.plain(this.#arrow)} ${value}\\\n${this.#theme.plain(\",\")}\\n`;\n  }\n  /**\n   * @public\n   * @param {*} variable\n   * @returns {string|undefined}\n   */\n  log(variable) {\n    if (this.#console) {\n      if (this.#clear) {\n        cliExit();\n      }\n      if (this.#immediate) {\n        setTimeout(() => cliPrint(this.toPrintable(variable), this.#stdout), 0);\n      } else {\n        cliPrint(this.toPrintable(variable), this.#stdout);\n      }\n      processExit(this.#exit);\n    }\n    if (this.#returns) {\n      return this.toPrintable(variable);\n    }\n  }\n  /**\n   * @name factory\n   * @public\n   * @static\n   * @param {boolean|Object} options\n   * @param {Object|string=} theme\n   * @returns {string|undefined}\n   */\n  static factory(options = true, theme) {\n    const createdOptions = Consono.createOptions(options);\n    const instance = new Consono(createdOptions, theme);\n    return function consono(variable) {\n      if (createdOptions.console) {\n        if (createdOptions.clear) {\n          cliExit();\n        }\n        if (createdOptions.immediate) {\n          setTimeout(() => cliPrint(instance.toPrintable(variable), createdOptions.stdout), 0);\n        } else {\n          cliPrint(instance.toPrintable(variable), createdOptions.stdout);\n        }\n        processExit(createdOptions.exit);\n      }\n      if (createdOptions.returns) {\n        return instance.toPrintable(variable);\n      }\n    };\n  }\n  /**\n   * @name createOptions\n   * @public\n   * @static\n   * @param {boolean|Object} options\n   * @returns {Object}\n   */\n  static createOptions(options = true) {\n    const basicOptions = { ...OPTIONS_DEFAULT };\n    if (typeof options === \"boolean\") {\n      basicOptions.console = options;\n    } else if (options && typeof options === \"object\") {\n      Object.assign(basicOptions, options);\n    }\n    return objectPick(basicOptions, OPTIONS_KEYS);\n  }\n}\n","import Consono from \"../../core/node/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/node/cliPrint.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\n/**\n * @name consono\n * @description Print variable\n * @param {*} variable\n * @param {boolean|Object} options\n * @param {Object|string=} theme\n * @returns {string|undefined}\n */\nexport default function consono(variable, options = true, theme = THEME_DEFAULT) {\n  const createdOptions = Consono.createOptions(options);\n  const instance = new Consono(createdOptions, theme);\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => cliPrint(instance.toPrintable(variable), createdOptions.stdout), 0);\n    } else {\n      cliPrint(instance.toPrintable(variable), createdOptions.stdout);\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return instance.toPrintable(variable);\n  }\n}\n","import Consono from \"../../core/node/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/node/cliPrint.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\n/**\n * @name consonoExit\n * @description Print variable and exit process\n * @param {*} variable\n * @param {boolean|Object} options\n * @param {Object|string=} theme\n * @param {boolean|number=} exitCode\n * @returns {string|undefined}\n */\nexport default function consonoExit(variable, options = true, theme = THEME_DEFAULT, exitCode = 0) {\n  const createdOptions = Consono.createOptions({ ...options, exit: exitCode });\n  const instance = new Consono(createdOptions, theme);\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => cliPrint(instance.toPrintable(variable), createdOptions.stdout), 0);\n    } else {\n      cliPrint(instance.toPrintable(variable), createdOptions.stdout);\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return instance.toPrintable(variable);\n  }\n}\n","import { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\nconst Reset = \"\\x1b[0m\";\n\nconst FgBlack = \"\\x1b[30m\";\nconst FgRed = \"\\x1b[31m\";\nconst FgGreen = \"\\x1b[32m\";\n// const FgYellow = \"\\x1b[33m\";\nconst FgBlue = \"\\x1b[34m\";\nconst FgMagenta = \"\\x1b[35m\";\n// const FgCyan = \"\\x1b[36m\";\nconst FgWhite = \"\\x1b[37m\";\n\nconst THEME_LIGHT = {\n  argument: FgRed,\n  boolean: FgMagenta,\n  comment: FgBlack,\n  keyword: FgBlue,\n  name: FgGreen,\n  number: FgMagenta,\n  plain: FgBlack,\n  property: FgRed,\n  string: FgGreen,\n};\n\nconst THEME_DARK = {\n  argument: FgRed,\n  boolean: FgMagenta,\n  comment: FgWhite,\n  keyword: FgBlue,\n  name: FgGreen,\n  number: FgMagenta,\n  plain: FgWhite,\n  property: FgRed,\n  string: FgGreen,\n};\n\nexport default class Theme {\n  /**\n   * @constructor\n   * @param {number=3} level\n   * @param {Object|string=} theme\n   */\n  // eslint-disable-next-line no-unused-vars\n  constructor(level = 3, theme = THEME_DEFAULT) {\n    let rgb;\n    switch (true) {\n      case theme === \"dark\":\n        rgb = THEME_DARK;\n        break;\n      case theme === \"light\":\n        rgb = THEME_LIGHT;\n        break;\n      default:\n        rgb = THEME_LIGHT;\n        break;\n    }\n    this.argument = (value) => rgb.argument + value.toString() + Reset;\n    this.boolean = (value) => rgb.boolean + value.toString() + Reset;\n    this.comment = (value) => rgb.comment + value.toString() + Reset;\n    this.keyword = (value) => rgb.keyword + value.toString() + Reset;\n    this.name = (value) => rgb.name + value.toString() + Reset;\n    this.number = (value) => rgb.number + value.toString() + Reset;\n    this.plain = (value) => rgb.plain + value.toString() + Reset;\n    this.property = (value) => rgb.property + value.toString() + Reset;\n    this.string = (value) => rgb.string + value.toString() + Reset;\n  }\n}\n","export default function cliPrint(message) {\n  console.log(message);\n}\n","import OPTIONS_DEFAULT from \"../../const/options_default.js\";\nimport OPTIONS_KEYS from \"../../const/options_keys.js\";\nimport TAG from \"../../const/tag.js\";\nimport Theme from \"./theme.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/browser/cliPrint.js\";\nimport funcNameExtract from \"../../utils/funcNameExtract.js\";\nimport isInteger from \"../../utils/isInteger.js\";\nimport objectClass from \"../../utils/objectClass.js\";\nimport objectDeCycle from \"../../utils/objectDeCycle.js\";\nimport objectPick from \"../../utils/objectPick.js\";\nimport objectSize from \"../../utils/objectSize.js\";\nimport objectType from \"../../utils/objectType.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport prototypeName from \"../../utils/prototypeName.js\";\nimport stringClearReference from \"../../utils/stringClearReference.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\nexport default class Consono {\n  #arrayMaxElements;\n  #arrow;\n  #clear;\n  #colorize;\n  #console;\n  #currentDepth;\n  #depth;\n  #exit;\n  #immediate;\n  #indentType;\n  #indent;\n  #mapMaxEntries;\n  #objectMaxProps;\n  #quotesEnd;\n  #quotesStart;\n  #returns;\n  #setMaxValues;\n  #stdout;\n  #stringMaxLength;\n  #theme;\n  /**\n   * @public\n   * @constructor\n   * @param {Object=} options\n   * @param {Object|string=} theme\n   */\n  constructor(options = {}, theme = THEME_DEFAULT) {\n    this.setOptions(options);\n    this.setTheme(theme);\n  }\n  /**\n   * @public\n   * @param {Object|string=} theme\n   */\n  setTheme(theme) {\n    /** @protected */\n    this.#theme = new Theme(this.#colorize ? 3 : 0, theme);\n  }\n  /**\n   * @public\n   * @param {Object=} options\n   */\n  setOptions(options = {}) {\n    options = options || {};\n    const opts = {\n      ...OPTIONS_DEFAULT,\n      ...options,\n    };\n    this.#arrayMaxElements = Number.parseInt(opts.arrayMaxElements);\n    this.#arrow = `${opts.assignSymbol}`;\n    this.#clear = !!opts.clear;\n    this.#colorize = !!opts.colorize;\n    this.#console = !!opts.console;\n    this.#stdout = !!opts.stdout;\n    this.#currentDepth = 0;\n    this.#depth = Number.parseInt(opts.depth);\n    if (opts.exit === false) {\n      this.#exit = false;\n    } else if (opts.exit === true) {\n      this.#exit = 0;\n    } else if (isInteger(opts.exit)) {\n      this.#exit = opts.exit;\n    } else {\n      this.#exit = false;\n    }\n    this.#indentType = `${opts.indent}`;\n    this.#indent = this.#indentType.repeat(opts.indentPad);\n    this.#mapMaxEntries = Number.parseInt(opts.mapMaxEntries);\n    this.#objectMaxProps = Number.parseInt(opts.objectMaxProps);\n    this.#quotesEnd = `${opts.quotesEnd}`;\n    this.#quotesStart = `${opts.quotesStart}`;\n    this.#returns = !!opts.returns;\n    this.#immediate = !!opts.immediate;\n    this.#setMaxValues = Number.parseInt(opts.setMaxValues);\n    this.#stringMaxLength = Number.parseInt(opts.stringMaxLength);\n  }\n  /**\n   * @public\n   * @param {*} value\n   * @param {string=} indent\n   * @param {boolean|string=true} describe\n   * @param {string=\"\"} subType\n   * @returns {string}\n   */\n  toPrintable(value, indent = \"\", describe = true, subType = \"\") {\n    let print = \"\";\n    let startsWith = \"\";\n    let endsWith = \"\";\n    let iterationLimit;\n    const type = objectType(value);\n    switch (type) {\n      case \"array\": {\n        const arrLength = value.length;\n        if (arrLength > this.#arrayMaxElements) {\n          startsWith = `${this.#theme.keyword(\"array\")}${subType.length ? ` ${this.#theme.keyword(subType)}` : \"\"} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"elements\")}${this.#theme.plain(\"=\")}\\\n${this.#theme.number(arrLength)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}=${this.#theme.number(this.#arrayMaxElements)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"[\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"array\")}${subType.length ? ` ${this.#theme.keyword(subType)}` : \"\"} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"elements\")}${this.#theme.plain(\"=\")}\\\n${this.#theme.number(arrLength)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"[\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"]\")}`;\n        iterationLimit = this.#arrayMaxElements;\n        break;\n      }\n      case \"object\": {\n        const origObject = value;\n        value = objectDeCycle(value);\n        if (describe === true) {\n          const size = objectSize(value);\n          let printSize = \"\";\n          if (size > this.#objectMaxProps) {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#objectMaxProps)}${this.#theme.plain(\n              \")\",\n            )}`;\n          } else {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\")\")}`;\n          }\n          startsWith = `${this.#theme.keyword(\"object\")} \\\n${this.#theme.keyword(objectClass(origObject))} ${printSize} ${this.#theme.plain(\"{\")}\\n`;\n          endsWith = `${indent}${this.#theme.plain(\"}\")}`;\n        } else {\n          startsWith = `${this.#theme.plain(\"(\")}\\n`;\n          endsWith = `${indent}${this.#theme.plain(\")\")}`;\n        }\n        iterationLimit = this.#objectMaxProps;\n        break;\n      }\n      case \"arguments\": {\n        const argLength = value.length;\n        if (argLength > this.#arrayMaxElements) {\n          startsWith = `${this.#theme.keyword(\"arguments\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"arity\")}${this.#theme.plain(\"=\")}${this.#theme.number(argLength)}, \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#arrayMaxElements)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"[\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"arguments\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"arity\")}${this.#theme.plain(\"=\")}${this.#theme.number(argLength)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"[\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"]\")}`;\n        iterationLimit = this.#arrayMaxElements;\n        break;\n      }\n      case \"set\": {\n        const setSize = value.size;\n        if (setSize > this.#setMaxValues) {\n          startsWith = `${this.#theme.keyword(\"set\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(setSize)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#setMaxValues)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"set\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(setSize)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        }\n        endsWith = `${indent}}`;\n        iterationLimit = this.#setMaxValues;\n        break;\n      }\n      case \"map\": {\n        const mapSize = value.size;\n        if (mapSize > this.#mapMaxEntries) {\n          startsWith = `${this.#theme.keyword(\"map\")} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(mapSize)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#mapMaxEntries)}\\\n${this.#theme.plain(\")\")} ${this.#theme.plain(\"{\")}\\n`;\n        } else {\n          startsWith = `${this.#theme.keyword(\"map\")} ${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"size\")}${this.#theme.plain(\"=\")}${this.#theme.number(mapSize)}${this.#theme.plain(\")\")} \\\n${this.#theme.plain(\"{\")}\\n`;\n        }\n        endsWith = `${indent}${this.#theme.plain(\"}\")}`;\n        iterationLimit = this.#mapMaxEntries;\n        break;\n      }\n      default:\n        return this.formatValue(indent, value);\n    }\n    let iteration = 0;\n    switch (type) {\n      case \"set\": {\n        const iterateSet = Array.from(value);\n        for (let itemKey = 0; itemKey < iterateSet.length; itemKey++) {\n          const originalValue = iterateSet[itemKey];\n          const formattedValue = this.formatValue(indent, originalValue);\n          print += this.formatAssign(\"set\", indent, itemKey, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      }\n      case \"map\":\n        for (const entry of value.entries()) {\n          const [entryKey, entryValue] = entry;\n          const formattedValue = this.formatValue(indent, { key: entryKey, value: entryValue }, false);\n          print += this.formatAssign(\"map\", indent, entryKey, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      default: {\n        const keys = Object.keys(value)\n          .sort((alpha, beta) => alpha.localeCompare(beta))\n          .reduce((previous, current) => {\n            previous[current] = undefined;\n            return previous;\n          }, {});\n        for (const key in keys) {\n          if (!Object.prototype.hasOwnProperty.call(value, key)) {\n            continue;\n          }\n          const originalValue = value[key];\n          const originalParamType = objectType(originalValue);\n          const formattedValue = this.formatValue(indent, originalValue);\n          print += this.formatAssign(originalParamType, indent, key, formattedValue);\n          iteration += 1;\n          if (iteration >= iterationLimit) {\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return `${startsWith}${print}${endsWith}`;\n  }\n  /**\n   * @protected\n   * @param {string} indent\n   * @param {*} originalValue\n   * @param {boolean|string=true} describe\n   * @returns {string}\n   */\n  formatValue(indent, originalValue, describe = true) {\n    let value = \"\";\n    let type = objectType(originalValue);\n    let subType = \"\";\n    const tag = prototypeName(originalValue);\n    switch (tag) {\n      case TAG.VOID:\n        [type, value] = this.formatUndefined();\n        break;\n      case TAG.NULL:\n        [type, value] = this.formatNull();\n        break;\n      case TAG.GLOBAL:\n      case TAG.WINDOW:\n        [type, value] = this.formatGlobal(tag, originalValue, indent);\n        break;\n      case TAG.BIGINT:\n        [type, value] = this.formatBigInt(originalValue);\n        break;\n      case TAG.NUMBER:\n        [type, value] = this.formatNumber(originalValue);\n        break;\n      case TAG.BOOL:\n        [type, value] = this.formatBoolean(originalValue);\n        break;\n      case TAG.STRING:\n        [type, value] = this.formatString(originalValue);\n        break;\n      case TAG.REGEXP:\n        [type, value] = this.formatRegexp(originalValue);\n        break;\n      case TAG.FUNCTION:\n      case TAG.ASYNC_FUNCTION:\n      case TAG.GENERATOR_FUNCTION:\n        [type, value] = this.formatFunction(tag, originalValue);\n        break;\n      case TAG.DATE:\n        [type, value] = this.formatDate(originalValue);\n        break;\n      case TAG.ARGUMENTS:\n        [type, value] = this.formatArguments(originalValue);\n        break;\n      case TAG.SYMBOL:\n        [type, value] = this.formatSymbol(originalValue);\n        break;\n      case TAG.PROMISE:\n        [type, value] = this.formatPromise();\n        break;\n      case TAG.GENERATOR:\n        [type, value] = this.formatGenerator();\n        break;\n      case TAG.ERROR:\n        [type, value] = this.formatError(originalValue);\n        break;\n      case TAG.WEAK_SET:\n      case TAG.WEAK_MAP:\n        [type, value] = this.formatWeak(tag);\n        break;\n      case TAG.SET:\n        [type, value] = this.formatSet(originalValue);\n        break;\n      case TAG.MAP:\n        [type, value] = this.formatMap(originalValue);\n        break;\n      case TAG.ARRAY_BUFFER:\n      case TAG.SHARED_ARRAY_BUFFER:\n        [type, value] = this.formatBuffer(tag, originalValue);\n        break;\n      default:\n        if (tag.includes(\"Array\")) {\n          type = \"array\";\n          subType = objectClass(originalValue).toLowerCase();\n          originalValue = Array.from(originalValue);\n        } else if (tag.includes(\"Iterator]\")) {\n          const iterator = tag.split(\" \")[1];\n          if (iterator === \"Set\") {\n            return this.toPrintable(new Set(Array.from(originalValue).map((e) => e[1])), indent, describe);\n          } else if (iterator === \"Map\") {\n            return this.toPrintable(new Map(Array.from(originalValue)), indent, describe);\n          } else if (iterator === \"String\") {\n            return this.toPrintable(\n              Array.from(originalValue)\n                .map((e) => e[1])\n                .join(\"\"),\n              indent,\n              describe,\n            );\n          } else if (iterator === \"Array\") {\n            return this.toPrintable(\n              Array.from(originalValue).map((e) => e[1]),\n              indent,\n              describe,\n            );\n          }\n        }\n        break;\n    }\n    switch (type) {\n      case \"array\":\n      case \"object\":\n        if (this.#currentDepth === this.#depth) {\n          const size = objectSize(originalValue);\n          let printSize = \"\";\n          if (size > this.#objectMaxProps) {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(this.#objectMaxProps)}\\\n${this.#theme.plain(\")\")}`;\n          } else {\n            printSize = `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"props\")}${this.#theme.plain(\"=\")}${this.#theme.number(size)}\\\n${this.#theme.plain(\")\")}`;\n          }\n          value = `${this.#theme.keyword(\"object\")} ${this.#theme.keyword(objectClass(originalValue))} ${printSize}`;\n        } else {\n          this.#currentDepth += 1;\n          let indentToPrint;\n          if (type === \"array\") {\n            indentToPrint = `${this.#theme.comment(indent)}`;\n          } else {\n            indentToPrint = `${indent}${this.#theme.comment(this.#indent)}`;\n          }\n          value = this.toPrintable(originalValue, indentToPrint, describe, subType);\n          this.#currentDepth -= 1;\n        }\n        break;\n      default:\n        if (!type.length) {\n          type = tag.split(\"[object \").pop().split(\"]\").shift().toLowerCase();\n          value = originalValue.toString();\n        }\n        break;\n    }\n    return `${this.#theme.keyword(type)}${type.length ? this.#theme.plain(\" • \") : \"\"}${value}`;\n  }\n  /**\n   * @protected\n   * @param {arguments} value\n   * @returns {[string, string]}\n   */\n  formatArguments(value) {\n    return [\"arguments\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @param {BigInteger} value\n   * @returns {[string, string]}\n   */\n  formatBigInt(value) {\n    return [\"number bigint\", this.#theme.number(value)];\n  }\n  /**\n   * @protected\n   * @param {boolean} value\n   * @returns {[string, string]}\n   */\n  formatBoolean(value) {\n    return [\"boolean\", this.#theme.boolean(value)];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {Buffer} value\n   * @returns {[string, string]}\n   */\n  formatBuffer(tag, value) {\n    return [\n      TAG.ARRAY_BUFFER ? \"array buffer\" : \"array buffer shared\",\n      `${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"bytes\")}${this.#theme.plain(\"=\")}${this.#theme.number(value.byteLength)}\\\n${this.#theme.plain(\")\")}`,\n    ];\n  }\n  /**\n   * @protected\n   * @param {Date} value\n   * @returns {[string, string]}\n   */\n  formatDate(value) {\n    return [\"date\", this.#theme.name(value.toISOString() + \" • \" + value.toString())];\n  }\n  /**\n   * @protected\n   * @param {Error} value\n   * @returns {[string, *]}\n   */\n  formatError(value) {\n    return [`error ${objectClass(value)}`, this.#theme.string(value.message)];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {Function} value\n   * @returns {[string, string]}\n   */\n  formatFunction(tag, value) {\n    let type = \"function\";\n    switch (tag) {\n      case TAG.ASYNC_FUNCTION:\n        type = `${type} async`;\n        break;\n      case TAG.GENERATOR_FUNCTION:\n        type = `${type} generator`;\n        break;\n    }\n    const name = funcNameExtract(value);\n    if (name.length) {\n      type = `${type} ${this.#theme.name(name)}`;\n    } else {\n      type = `${type} anonymous`;\n    }\n    const source = `${value}`.replace(/\\n+/g, \"\").split(\")\").shift() + \") {…}\";\n    return [type, this.#theme.argument(source)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatGenerator() {\n    return [\"generator\", this.#theme.argument(\"Generator {…}\")];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @param {global|window} value\n   * @param {string} indent\n   * @returns {[string, string]}\n   */\n  formatGlobal(tag, value, indent) {\n    return [\n      `global ${tag === TAG.WINDOW ? \"window\" : \"this\"}`,\n      this.toPrintable({ ...value }, `${indent}${this.#theme.comment(this.#indent)}`),\n    ];\n  }\n  /**\n   * @protected\n   * @param {Map} value\n   * @returns {[string, string]}\n   */\n  formatMap(value) {\n    return [\"map\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatNull() {\n    return [\"empty\", this.#theme.string(\"null\")];\n  }\n  /**\n   * @protected\n   * @param {number} value\n   * @returns {[string, string]}\n   */\n  formatNumber(value) {\n    let type;\n    if (Number.isFinite(value)) {\n      if (Number.isInteger(value)) {\n        if (value === 0) {\n          if (Object.is(value, -0)) {\n            type = \"number negative zero\";\n          } else {\n            type = \"number zero\";\n          }\n        } else {\n          type = \"number integer\";\n        }\n      } else {\n        type = \"number float\";\n      }\n    } else {\n      type = \"number\";\n      if (Number.isNaN(value)) {\n        type += \" nan\";\n      } else if (value === Number.POSITIVE_INFINITY) {\n        type += \" positive infinity\";\n      } else {\n        type += \" negative infinity\";\n      }\n    }\n    return [type, this.#theme.number(Object.is(value, -0) ? \"-0\" : value)];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatPromise() {\n    return [\"promise\", this.#theme.argument(\"Promise {…}\")];\n  }\n  /**\n   * @protected\n   * @param {RegExp} value\n   * @returns {[string, string]}\n   */\n  formatRegexp(value) {\n    return [`regexp ${value.flags}`, this.#theme.name(value)];\n  }\n  /**\n   * @protected\n   * @param {Set} value\n   * @returns {[string,string]}\n   */\n  formatSet(value) {\n    return [\"set\", this.toPrintable(value)];\n  }\n  /**\n   * @protected\n   * @param {string} text\n   * @returns {[string, string]}\n   */\n  formatString(text) {\n    const stringAsArray = [...text];\n    const stringSize = stringAsArray.length;\n    const stringLength = text.length;\n    let printString = \"\";\n    if (this.#stringMaxLength > 0) {\n      if (stringLength !== stringSize) {\n        printString = stringAsArray.slice(0, this.#stringMaxLength).join(\"\");\n      } else {\n        printString = text.slice(0, this.#stringMaxLength);\n      }\n    }\n    let value;\n    if (stringLength === stringSize) {\n      value = `${this.#theme.string(this.#quotesStart)}\\\n${this.#theme.string(printString || text)}${this.#theme.string(this.#quotesEnd)} \\\n${this.#theme.plain(\"(\")}${this.#theme.argument(\"length\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringLength)}`;\n    } else {\n      value = `${this.#theme.string(this.#quotesStart)}\\\n${this.#theme.string(printString || text)}${this.#theme.string(this.#quotesEnd)} \\\n${this.#theme.plain(\"(\")}\\\n${this.#theme.argument(\"length\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringLength)}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"symbols\")}${this.#theme.plain(\"=\")}${this.#theme.number(stringSize)}`;\n    }\n    if (stringSize > this.#stringMaxLength) {\n      value = `${value}${this.#theme.plain(\",\")} \\\n${this.#theme.argument(\"shown\")}${this.#theme.plain(\"=\")}${this.#theme.number(\n        this.#stringMaxLength,\n      )}${this.#theme.plain(\")\")}`;\n    } else {\n      value = `${value}${this.#theme.plain(\")\")}`;\n    }\n    stringClearReference(printString || text);\n    return [\"string\", value];\n  }\n  /**\n   * @protected\n   * @param {Symbol} value\n   * @returns {[string, string]}\n   */\n  formatSymbol(value) {\n    return [\"symbol\", value.toString()];\n  }\n  /**\n   * @protected\n   * @returns {[string, string]}\n   */\n  formatUndefined() {\n    return [\"empty\", this.#theme.string(\"undefined\")];\n  }\n  /**\n   * @protected\n   * @param {string} tag\n   * @returns {[string,string]}\n   */\n  formatWeak(tag) {\n    if (tag === TAG.WEAK_MAP) {\n      return [\"map weak\", \"\"];\n    } else {\n      return [\"set weak\", \"\"];\n    }\n  }\n  /**\n   * @protected\n   * @param paramType\n   * @param {string} indent\n   * @param {number|string} key\n   * @param {*} value\n   * @returns {string}\n   */\n  formatAssign(paramType, indent, key, value) {\n    let keyPart;\n    if (paramType === \"map\") {\n      return `${indent}${this.#theme.comment(this.#indent)}${value}\\\n${this.#theme.plain(\",\")}\\n`;\n    } else if (paramType === \"set\") {\n      return `${indent}${this.#theme.comment(this.#indent)}${this.#theme.plain(this.#arrow)} ${value}\\\n${this.#theme.plain(\",\")}\\n`;\n    } else if (isInteger(key) || (paramType === \"array\" && typeof key !== \"string\")) {\n      keyPart = `${this.#theme.plain(\"[\")}${this.#theme.property(key)}${this.#theme.plain(\"]\")}`;\n    } else {\n      keyPart = `${this.#theme.plain(this.#quotesStart)}${this.#theme.property(key)}${this.#theme.plain(\n        this.#quotesEnd,\n      )}`;\n    }\n    return `${indent}${this.#theme.comment(this.#indent)}${keyPart} ${this.#theme.plain(this.#arrow)} ${value}\\\n${this.#theme.plain(\",\")}\\n`;\n  }\n  /**\n   * @public\n   * @param {*} variable\n   * @returns {string|undefined}\n   */\n  log(variable) {\n    if (this.#console) {\n      if (this.#clear) {\n        cliExit();\n      }\n      if (this.#immediate) {\n        setTimeout(() => cliPrint(this.toPrintable(variable) /*, this.#stdout*/), 0);\n      } else {\n        cliPrint(this.toPrintable(variable) /*, this.#stdout*/);\n      }\n      processExit(this.#exit);\n    }\n    if (this.#returns) {\n      return this.toPrintable(variable);\n    }\n  }\n  /**\n   * @name factory\n   * @public\n   * @static\n   * @param {boolean|Object} options\n   * @param {Object|string=} theme\n   * @returns {string|undefined}\n   */\n  static factory(options = true, theme) {\n    const createdOptions = Consono.createOptions(options);\n    const instance = new Consono(createdOptions, theme);\n    return function consono(variable) {\n      if (createdOptions.console) {\n        if (createdOptions.clear) {\n          cliExit();\n        }\n        if (createdOptions.immediate) {\n          setTimeout(() => cliPrint(instance.toPrintable(variable) /*, createdOptions.stdout*/), 0);\n        } else {\n          cliPrint(instance.toPrintable(variable) /*, createdOptions.stdout*/);\n        }\n        processExit(createdOptions.exit);\n      }\n      if (createdOptions.returns) {\n        return instance.toPrintable(variable);\n      }\n    };\n  }\n  /**\n   * @name createOptions\n   * @public\n   * @static\n   * @param {boolean|Object} options\n   * @returns {Object}\n   */\n  static createOptions(options = true) {\n    const basicOptions = { ...OPTIONS_DEFAULT };\n    if (typeof options === \"boolean\") {\n      basicOptions.console = options;\n    } else if (options && typeof options === \"object\") {\n      Object.assign(basicOptions, options);\n    }\n    return objectPick(basicOptions, OPTIONS_KEYS);\n  }\n}\n","/**\n * @name objectKeysSort\n * @param {*} instance\n * @param {boolean=true} isDeep\n * @returns {*}\n */\nexport default function objectKeysSort(instance, isDeep = true) {\n  if (!instance || typeof instance !== \"object\" || Array.isArray(instance)) {\n    return instance;\n  }\n  const keys = Object.keys(instance);\n  if (!keys.length) {\n    return instance;\n  }\n  return keys.reduce((sorted, key) => {\n    if (isDeep && instance[key] && typeof instance[key] === \"object\" && !Array.isArray(instance[key])) {\n      sorted[key] = objectKeysSort(instance[key], isDeep);\n    } else {\n      sorted[key] = instance[key];\n    }\n    return sorted;\n  }, Object.create(Object.getPrototypeOf(instance)));\n}\n","import Consono from \"../../core/browser/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport objectKeysSort from \"../../utils/objectKeysSort.js\";\n\n/**\n * @name consonoJSON\n * @description Print variable as JSON without highlighting. Uses `console.dir`.\n * @param {*} variable\n * @param {boolean|Object} [options=true]\n * @param {boolean} [sortKeys=true]\n * @returns {string|undefined}\n * @since 1.4.11\n */\nexport default function consonoJSON(variable, options, sortKeys = true) {\n  let out;\n  if (variable === undefined) {\n    out = undefined;\n  } else {\n    out = JSON.parse(JSON.stringify(variable), null, 2);\n  }\n  if (sortKeys) {\n    out = objectKeysSort(out);\n  }\n  const createdOptions = Consono.createOptions({ ...options });\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => {\n        if (out === undefined) {\n          console.dir(undefined);\n        } else {\n          console.dir(out);\n        }\n      }, 0);\n    } else {\n      if (out === undefined) {\n        console.dir(undefined);\n      } else {\n        console.dir(out);\n      }\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return out;\n  }\n}\n","import Consono from \"../../core/browser/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport processExit from \"../../utils/processExit.js\";\n\n/**\n * @name consonoOut\n * @description Print variable as JSON without highlighting. Uses `process.stdout.write`.\n * @param {*} variable\n * @param {boolean|Object} [options=true]\n * @returns {string|undefined}\n * @since 1.4.12\n */\nexport default function consonoOut(variable, options) {\n  let out;\n  if (variable === undefined) {\n    out = undefined;\n  } else {\n    out = JSON.stringify(JSON.parse(JSON.stringify(variable)), null, 2);\n  }\n  const createdOptions = Consono.createOptions({ ...options });\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => {\n        if (out === undefined) {\n          process.stdout.write(undefined);\n        } else {\n          process.stdout.write(out);\n        }\n        process.stdout.write(\"\\n\");\n      }, 0);\n    } else {\n      if (out === undefined) {\n        process.stdout.write(undefined);\n      } else {\n        process.stdout.write(out);\n      }\n      process.stdout.write(\"\\n\");\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return out;\n  }\n}\n","import Consono from \"../../core/node/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/node/cliPrint.js\";\nimport processExit from \"../../utils/processExit.js\";\n\n/**\n * @name consonoPlain\n * @description Print variable without highlighting\n * @param {*} variable\n * @param {boolean|Object} options\n * @returns {string|undefined}\n */\nexport default function consonoPlain(variable, options = true) {\n  const createdOptions = Consono.createOptions({ ...options, colorize: false });\n  const instance = new Consono(createdOptions);\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => cliPrint(instance.toPrintable(variable), createdOptions.stdout), 0);\n    } else {\n      cliPrint(instance.toPrintable(variable), createdOptions.stdout);\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return instance.toPrintable(variable);\n  }\n}\n","import Consono from \"../../core/node/consono.js\";\nimport cliExit from \"../../utils/cliExit.js\";\nimport cliPrint from \"../../utils/node/cliPrint.js\";\nimport processExit from \"../../utils/processExit.js\";\nimport { THEME_DEFAULT } from \"../../const/theme_default.js\";\n\n/**\n * @name consonoReturn\n * @description Return variable with highlighting\n * @param {*} variable\n * @param {boolean|Object} options\n * @param {Object|string=} theme\n * @returns {string|undefined}\n */\nexport default function consonoReturn(variable, options = true, theme = THEME_DEFAULT) {\n  const createdOptions = Consono.createOptions({ ...options, console: false, returns: true });\n  const instance = new Consono(createdOptions, theme);\n  if (createdOptions.console) {\n    if (createdOptions.clear) {\n      cliExit();\n    }\n    if (createdOptions.immediate) {\n      setTimeout(() => cliPrint(instance.toPrintable(variable), createdOptions.stdout), 0);\n    } else {\n      cliPrint(instance.toPrintable(variable), createdOptions.stdout);\n    }\n    processExit(createdOptions.exit);\n  }\n  if (createdOptions.returns) {\n    return instance.toPrintable(variable);\n  }\n}\n"],"names":["OPTIONS_DEFAULT","arrayMaxElements","assignSymbol","clear","colorize","console","depth","exit","immediate","indent","indentPad","mapMaxEntries","objectMaxProps","quotesEnd","quotesStart","returns","setMaxValues","stdout","stringMaxLength","OPTIONS_KEYS","THEME_DARK","argument","boolean","comment","keyword","name","number","plain","property","string","THEME_LIGHT","Theme","constructor","level","theme","rgb","cli","chalk","Instance","Math","min","supportsColor","Object","prototype","toString","call","this","compose","color","Number","parseInt","isInteger","max","red","green","blue","toRGB","value","cliExit","err","process","write","cliPrint","message","log","funcNameExtract","func","result","exec","objectClass","prototypeName","looseClone","object","inExactInstance","key","objectDeCycle","objects","paths","deReCycle","path","index","newIterable","Boolean","Date","RegExp","String","length","push","TAG","isFrozen","create","hasOwnProperty","JSON","stringify","objectPick","keys","reduce","accumulator","objectSize","obj","objectType","type","toLowerCase","split","pop","shift","includes","processExit","code","exitCode","error","stringClearReference","text","slice","Consono","options","setOptions","setTheme","_classPrivateFieldGet","opts","repeat","toPrintable","describe","subType","iterationLimit","print","startsWith","endsWith","arrLength","origObject","size","printSize","argLength","setSize","mapSize","formatValue","iteration","iterateSet","Array","from","itemKey","originalValue","formattedValue","formatAssign","entry","entries","entryKey","entryValue","sort","alpha","beta","localeCompare","previous","current","undefined","originalParamType","tag","formatUndefined","formatNull","formatGlobal","formatBigInt","formatNumber","formatBoolean","formatString","formatRegexp","formatFunction","formatDate","formatArguments","formatSymbol","formatPromise","formatGenerator","formatError","formatWeak","formatSet","formatMap","formatBuffer","iterator","Set","map","e","Map","join","indentToPrint","byteLength","toISOString","source","replace","isFinite","is","isNaN","POSITIVE_INFINITY","flags","stringAsArray","stringSize","stringLength","printString","paramType","keyPart","variable","setTimeout","createdOptions","createOptions","instance","consono","basicOptions","assign","consonoExit","objectKeysSort","isDeep","isArray","sorted","getPrototypeOf","consonoJSON","sortKeys","out","parse","dir","consonoOut","consonoPlain","consonoReturn"],"mappings":"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"}